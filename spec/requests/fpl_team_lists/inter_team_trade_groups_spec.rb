require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe 'fpl_team_lists/:fpl_team_list_id/inter_team_trade_groups', :no_transaction, type: :request do
  describe 'GET /index' do
    let(:fpl_team_list) { create :fpl_team_list }
    let(:inter_team_trade_group1) { create(:inter_team_trade_group, out_fpl_team_list: fpl_team_list) }
    let!(:inter_team_trade1) { create :inter_team_trade, inter_team_trade_group: inter_team_trade_group1 }

    let(:inter_team_trade_group2) { create :inter_team_trade_group, :submitted, out_fpl_team_list: fpl_team_list }
    let!(:inter_team_trade2) { create :inter_team_trade, inter_team_trade_group: inter_team_trade_group2 }
    let!(:inter_team_trade3) { create :inter_team_trade, inter_team_trade_group: inter_team_trade_group2 }

    let(:inter_team_trade_group3)  { create(:inter_team_trade_group, :submitted, in_fpl_team_list: fpl_team_list) }
    let!(:inter_team_trade4) { create :inter_team_trade, inter_team_trade_group: inter_team_trade_group3 }

    let(:inter_team_trade_group4) { create :inter_team_trade_group, :declined, in_fpl_team_list: fpl_team_list }
    let!(:inter_team_trade5) { create :inter_team_trade, inter_team_trade_group: inter_team_trade_group4 }

    let(:inter_team_trade_group5) { create :inter_team_trade_group, :approved, out_fpl_team_list: fpl_team_list }
    let!(:inter_team_trade6) { create :inter_team_trade, inter_team_trade_group: inter_team_trade_group5 }

    let(:inter_team_trade_group6) { create :inter_team_trade_group, :cancelled, out_fpl_team_list: fpl_team_list }
    let!(:inter_team_trade7) { create :inter_team_trade, inter_team_trade_group: inter_team_trade_group6 }

    let(:inter_team_trade_group7) { create :inter_team_trade_group, :cancelled, in_fpl_team_list: fpl_team_list }
    let!(:inter_team_trade8) { create :inter_team_trade, inter_team_trade_group: inter_team_trade_group7 }

    before { api.authenticate(fpl_team_list.owner) }

    it 'renders a successful response' do
      api.get api_fpl_team_list_inter_team_trade_groups_url(fpl_team_list)

      expect(api.response).to have_http_status(:success)

      expect(api.data['out_trade_groups']).to match(
        [
          a_hash_including(
            'id' => inter_team_trade_group1.to_param,
            'status' => 'Pending',
            'trades' => contain_exactly(
              a_hash_including(
                'id' => inter_team_trade1.to_param,
                'in_team' => a_hash_including(
                  'id' => inter_team_trade1.in_player.team.to_param,
                  'short_name' => inter_team_trade1.in_player.team.short_name,
                ),
                'out_team' => a_hash_including(
                  'id' => inter_team_trade1.out_player.team.to_param,
                  'short_name' => inter_team_trade1.out_player.team.short_name,
                ),
                'position' => inter_team_trade1.out_player.position.singular_name_short,
                'in_player' => a_hash_including(
                  'id' => inter_team_trade1.in_player.to_param,
                  'last_name' => inter_team_trade1.in_player.last_name,
                  'first_name' => inter_team_trade1.in_player.first_name,
                ),
                'out_player' => a_hash_including(
                  'id' => inter_team_trade1.out_player.to_param,
                  'last_name' => inter_team_trade1.out_player.last_name,
                  'first_name' => inter_team_trade1.out_player.first_name,
                ),
              ),
            ),
            'can_cancel' => true,
            'can_submit' => true,
            'can_approve' => false,
            'in_fpl_team' => a_hash_including(
              'id' => inter_team_trade_group1.in_fpl_team.to_param,
              'name' => inter_team_trade_group1.in_fpl_team.name,
            ),
            'out_fpl_team' => a_hash_including(
              'id' => fpl_team_list.fpl_team.to_param,
              'name' => fpl_team_list.fpl_team.name,
            ),
          ),
          a_hash_including(
            'id' => inter_team_trade_group2.to_param,
            'status' => 'Submitted',
            'trades' => contain_exactly(
              a_hash_including(
                'id' => inter_team_trade2.to_param,
                'in_team' => a_hash_including(
                  'id' => inter_team_trade2.in_player.team.to_param,
                  'short_name' => inter_team_trade2.in_player.team.short_name,
                ),
                'out_team' => a_hash_including(
                  'id' => inter_team_trade2.out_player.team.to_param,
                  'short_name' => inter_team_trade2.out_player.team.short_name,
                ),
                'position' => inter_team_trade2.out_player.position.singular_name_short,
                'in_player' => a_hash_including(
                  'id' => inter_team_trade2.in_player.to_param,
                  'last_name' => inter_team_trade2.in_player.last_name,
                  'first_name' => inter_team_trade2.in_player.first_name,
                ),
                'out_player' => a_hash_including(
                  'id' => inter_team_trade2.out_player.to_param,
                  'last_name' => inter_team_trade2.out_player.last_name,
                  'first_name' => inter_team_trade2.out_player.first_name,
                ),
              ),
              a_hash_including(
                'id' => inter_team_trade3.to_param,
                'in_team' => a_hash_including(
                  'id' => inter_team_trade3.in_player.team.to_param,
                  'short_name' => inter_team_trade3.in_player.team.short_name,
                ),
                'out_team' => a_hash_including(
                  'id' => inter_team_trade3.out_player.team.to_param,
                  'short_name' => inter_team_trade3.out_player.team.short_name,
                ),
                'position' => inter_team_trade3.out_player.position.singular_name_short,
                'in_player' => a_hash_including(
                  'id' => inter_team_trade3.in_player.to_param,
                  'last_name' => inter_team_trade3.in_player.last_name,
                  'first_name' => inter_team_trade3.in_player.first_name,
                ),
                'out_player' => a_hash_including(
                  'id' => inter_team_trade3.out_player.to_param,
                  'last_name' => inter_team_trade3.out_player.last_name,
                  'first_name' => inter_team_trade3.out_player.first_name,
                ),
              ),
            ),
            'can_cancel' => true,
            'can_submit' => false,
            'can_approve' => false,
            'in_fpl_team' => a_hash_including(
              'id' => inter_team_trade_group2.in_fpl_team.to_param,
              'name' => inter_team_trade_group2.in_fpl_team.name,
            ),
            'out_fpl_team' => a_hash_including(
              'id' => fpl_team_list.fpl_team.to_param,
              'name' => fpl_team_list.fpl_team.name,
            ),
          ),
          a_hash_including(
            'id' => inter_team_trade_group5.to_param,
            'status' => 'Approved',
            'trades' => contain_exactly(
              a_hash_including(
                'id' => inter_team_trade6.to_param,
                'in_team' => a_hash_including(
                  'id' => inter_team_trade6.in_player.team.to_param,
                  'short_name' => inter_team_trade6.in_player.team.short_name,
                ),
                'out_team' => a_hash_including(
                  'id' => inter_team_trade6.out_player.team.to_param,
                  'short_name' => inter_team_trade6.out_player.team.short_name,
                ),
                'position' => inter_team_trade6.out_player.position.singular_name_short,
                'in_player' => a_hash_including(
                  'id' => inter_team_trade6.in_player.to_param,
                  'last_name' => inter_team_trade6.in_player.last_name,
                  'first_name' => inter_team_trade6.in_player.first_name,
                ),
                'out_player' => a_hash_including(
                  'id' => inter_team_trade6.out_player.to_param,
                  'last_name' => inter_team_trade6.out_player.last_name,
                  'first_name' => inter_team_trade6.out_player.first_name,
                ),
              ),
            ),
            'can_cancel' => false,
            'can_submit' => false,
            'can_approve' => false,
            'in_fpl_team' => a_hash_including(
              'id' => inter_team_trade_group5.in_fpl_team.to_param,
              'name' => inter_team_trade_group5.in_fpl_team.name,
            ),
            'out_fpl_team' => a_hash_including(
              'id' => fpl_team_list.fpl_team.to_param,
              'name' => fpl_team_list.fpl_team.name,
            ),
          ),
        ]
      )

      expect(api.data['in_trade_groups']).to match(
        [
          a_hash_including(
            'id' => inter_team_trade_group3.to_param,
            'status' => 'Submitted',
            'trades' => contain_exactly(
              a_hash_including(
                'id' => inter_team_trade4.to_param,
                'in_team' => a_hash_including(
                  'id' => inter_team_trade4.in_player.team.to_param,
                  'short_name' => inter_team_trade4.in_player.team.short_name,
                ),
                'out_team' => a_hash_including(
                  'id' => inter_team_trade4.out_player.team.to_param,
                  'short_name' => inter_team_trade4.out_player.team.short_name,
                ),
                'position' => inter_team_trade4.out_player.position.singular_name_short,
                'in_player' => a_hash_including(
                  'id' => inter_team_trade4.in_player.to_param,
                  'last_name' => inter_team_trade4.in_player.last_name,
                  'first_name' => inter_team_trade4.in_player.first_name,
                ),
                'out_player' => a_hash_including(
                  'id' => inter_team_trade4.out_player.to_param,
                  'last_name' => inter_team_trade4.out_player.last_name,
                  'first_name' => inter_team_trade4.out_player.first_name,
                ),
              ),
            ),
            'can_cancel' => false,
            'can_submit' => false,
            'can_approve' => true,
            'in_fpl_team' => a_hash_including(
              'id' => fpl_team_list.fpl_team.to_param,
              'name' => fpl_team_list.fpl_team.name,
            ),
            'out_fpl_team' => a_hash_including(
              'id' => inter_team_trade_group3.out_fpl_team.to_param,
              'name' => inter_team_trade_group3.out_fpl_team.name,
            ),
          ),
          a_hash_including(
            'id' => inter_team_trade_group4.to_param,
            'status' => 'Declined',
            'trades' => contain_exactly(
              a_hash_including(
                'id' => inter_team_trade5.to_param,
                'in_team' => a_hash_including(
                  'id' => inter_team_trade5.in_player.team.to_param,
                  'short_name' => inter_team_trade5.in_player.team.short_name,
                ),
                'out_team' => a_hash_including(
                  'id' => inter_team_trade5.out_player.team.to_param,
                  'short_name' => inter_team_trade5.out_player.team.short_name,
                ),
                'position' => inter_team_trade5.out_player.position.singular_name_short,
                'in_player' => a_hash_including(
                  'id' => inter_team_trade5.in_player.to_param,
                  'last_name' =>  inter_team_trade5.in_player.last_name,
                  'first_name' => inter_team_trade5.in_player.first_name,
                ),
                'out_player' => a_hash_including(
                  'id' => inter_team_trade5.out_player.to_param,
                  'last_name' => inter_team_trade5.out_player.last_name,
                  'first_name' => inter_team_trade5.out_player.first_name,
                ),
              ),
            ),
            'can_cancel' => false,
            'can_submit' => false,
            'can_approve' => false,
            'in_fpl_team' => a_hash_including(
              'id' => fpl_team_list.fpl_team.to_param,
              'name' => fpl_team_list.fpl_team.name,
            ),
            'out_fpl_team' => a_hash_including(
              'id' => inter_team_trade_group4.out_fpl_team.to_param,
              'name' => inter_team_trade_group4.out_fpl_team.name,
            ),
          ),
        ],
      )
    end

    it 'returns nothing if the user is not the owner' do
      fpl_team_list.fpl_team.update(owner: create(:user))

      api.get api_fpl_team_list_inter_team_trade_groups_url(fpl_team_list)

      expect(response).to have_http_status(:success)
      expect(api.data).to eq(
        'out_trade_groups' => [],
        'in_trade_groups' => [],
      )
    end
  end

  describe 'POST /create' do
    let(:round) { create :round, :current }
    let(:fpl_team1) { create :fpl_team }
    let(:fpl_team2) { create :fpl_team, league: fpl_team1.league }
    let(:fpl_team_list1) { create :fpl_team_list, fpl_team: fpl_team1, round: round }
    let(:fpl_team_list2) { create :fpl_team_list, fpl_team: fpl_team2, round: round }

    let(:position) { create :position, :forward }
    let(:player1) { create :player, position: position }
    let(:player2) { create :player, position: position }

    let!(:list_position1) { create :list_position, player: player1, fpl_team_list: fpl_team_list1 }
    let!(:list_position2) { create :list_position, player: player2, fpl_team_list: fpl_team_list2 }

    before { api.authenticate(fpl_team_list1.owner) }

    it 'successfully creates a pending inter_team_trade_group' do
      expect {
        api.post api_fpl_team_list_inter_team_trade_groups_url(fpl_team_list1),
                 params: {
                   inter_team_trade_group: {
                     in_fpl_team_list_id: fpl_team_list2.id,
                     out_player_id: player1.id,
                     in_player_id: player2.id,
                   },
                 }
      }
      .to change { InterTeamTradeGroup.count }.from(0).to(1)
      .and change { InterTeamTrade.count }.from(0).to(1)

      inter_team_trade_group = InterTeamTradeGroup.first
      inter_team_trade = InterTeamTrade.first

      expect(api.data['out_trade_groups']).to contain_exactly(
        a_hash_including(
         'id' => inter_team_trade_group.to_param,
         'status' => 'Pending',
         'trades' => contain_exactly(
           a_hash_including(
             'id' => inter_team_trade.to_param,
             'in_team' => a_hash_including(
               'id' => player2.team.to_param,
               'short_name' => player2.team.short_name,
             ),
             'out_team' => a_hash_including(
               'id' => player1.team.to_param,
               'short_name' => player1.team.short_name,
             ),
             'position' => position.singular_name_short,
             'in_player' => a_hash_including(
               'id' => player2.to_param,
               'last_name' => player2.last_name,
               'first_name' => player2.first_name,
             ),
             'out_player' => a_hash_including(
               'id' => player1.to_param,
               'last_name' => player1.last_name,
               'first_name' => player1.first_name,
             ),
           ),
         ),
         'can_cancel' => true,
         'can_submit' => true,
         'can_approve' => false,
         'in_fpl_team' => a_hash_including(
           'id' => fpl_team2.to_param,
           'name' => fpl_team2.name,
          ),
          'out_fpl_team' => a_hash_including(
            'id' => fpl_team1.to_param,
            'name' => fpl_team1.name,
          ),
        ),
      )
      expect(api.data['in_trade_groups']).to be_empty
    end

    it 'returns a 422 if there is an error' do
      fpl_team1.update(owner: create(:user))

      expect {
        api.post api_fpl_team_list_inter_team_trade_groups_url(fpl_team_list1),
                 params: {
                   inter_team_trade_group: {
                     in_fpl_team_list_id: fpl_team_list2.id,
                     out_player_id: player1.id,
                     in_player_id: player2.id,
                   },
                 }
      }
      .to change { InterTeamTradeGroup.count }.by(0)
      .and change { InterTeamTrade.count }.by(0)

      expect(response).to have_http_status(:unprocessable_entity)

      expect(api.errors).to contain_exactly(
        a_hash_including('detail' => 'You are not authorised to perform this action', 'source' => 'base'),
      )
    end
  end
end
