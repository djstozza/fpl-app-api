require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/rounds', type: :request do
  describe 'GET /index' do
    let!(:round1) { create :round, :previous }
    let!(:round2) { create :round, :current }
    let!(:round3) { create :round, :next }

    let!(:team1) { create :team }
    let!(:team2) { create :team }

    let!(:player1) { create :player, team: team1 }
    let!(:player2) { create :player, team: team2 }

    let!(:fixture1) do
      create(
        :fixture,
        round: round1,
        home_team: team1,
        away_team: team2
      )
    end

    it 'renders a successful response' do
      api.get api_rounds_url

      expect(api.data).to contain_exactly(
        a_hash_including(
          'id' => round1.to_param,
          'name' => round1.name,
          'finished' => true,
          'data_checked' => true,
          'is_previous' => true,
          'is_current' => false,
          'is_next' => false,
        ),
        a_hash_including(
          'id' => round2.to_param,
          'name' => round2.name,
          'finished' => false,
          'data_checked' => false,
          'is_previous' => false,
          'is_current' => true,
          'is_next' => false
        ),
        a_hash_including(
          'id' => round3.to_param,
          'name' => round3.name,
          'finished' => false,
          'data_checked' => false,
          'is_previous' => false,
          'is_current' => false,
          'is_next' => true,
        ),
      )
    end

    describe 'GET /show' do
      include_examples 'not found', 'round'

      it 'renders a successful response' do
        api.get api_round_url(round1)
        expect(response).to be_successful

        expect(api.data).to include(
          'id' => round1.to_param,
          'name' => round1.name,
          'finished' => true,
          'data_checked' => true,
          'is_previous' => true,
          'is_current' => false,
          'is_next' => false,
          'fixtures' => including(
            a_hash_including(
              'team_a_difficulty' => 1,
              'team_a_score' => 0,
              'team_h_difficulty' => 4,
              'team_h_score' => 1,
              'stats' => including(
                a_hash_including(
                  'a'=>[],
                  'h' => [{'value' => 1, 'element' => 1}],
                  'identifier'=>'goals_scored'
                )
              ),
              'home_team' => a_hash_including(
                'id' =>  team1.to_param,
                'name' => team1.name,
                'short_name'=> team1.short_name,
                'players' => including(
                  a_hash_including(
                    'id' => player1.to_param,
                    'position' => a_hash_including(
                      'id' => player1.position.to_param,
                    ),
                  ),
                ),
              ),
              'away_team' => a_hash_including(
                'id' => team2.to_param,
                'players' => including(
                  a_hash_including(
                    'id' => player2.to_param,
                    'position' => a_hash_including(
                      'id' => player2.position.to_param,
                    ),
                  ),
                ),
              ),
            ),
          ),
        )
      end
    end
  end
end
