require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe 'api/players', type: :request do
  let!(:player1) { create :player, :forward }
  let!(:player2) { create :player, :defender }

  describe 'GET /index' do
    it 'renders a successful response' do
      api.get api_players_url

      expect(response).to be_successful

      expect(api.data).to contain_exactly(
        {
          'id' => player1.to_param,
          'first_name' => player1.first_name,
          'last_name' => player1.last_name,
          'external_id' => player1.external_id.to_s,
          'position'=> {
            'id' => player1.position.to_param,
            'singular_name' => 'Forward',
            'singular_name_short' => 'FWD',
          },
          'team'=> a_hash_including(
            'id' =>  player1.team.to_param,
            'name' => player1.team.name,
            'short_name' => player1.team.short_name,
          ),
        },
        {
          'id' => player2.to_param,
          'first_name' => player2.first_name,
          'last_name' => player2.last_name,
          'external_id' => player2.external_id.to_s,
          'position'=> {
            'id' => player2.position.to_param,
            'singular_name' => 'Defender',
            'singular_name_short' => 'DEF',
          },
          'team'=> a_hash_including(
            'id' => player2.team.to_param,
            'name' => player2.team.name,
            'short_name' => player2.team.short_name,
          ),
        }
      )
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      get api_player_url(player1)

      expect(response).to be_successful

      expect(api.data).to include(
        'id' => player1.to_param,
        'first_name' => player1.first_name,
        'last_name' => player1.last_name,
        'position'=> {
          'id' => player1.position.to_param,
          'singular_name' => 'Forward',
          'singular_name_short' => 'FWD',
        },
        'team'=> a_hash_including(
          'id' =>  player1.team.to_param,
          'name' => player1.team.name,
          'short_name' => player1.team.short_name,
        ),
      )
    end
  end
end
