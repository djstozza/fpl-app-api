require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "aoi/leagues/joins", type: :request do
  let!(:user) { create :user }
  let!(:league) { create :league }

  describe 'POST /create' do
    it 'creates a new fpl_team' do
      api.authenticate(user)

      api.post api_league_join_url(league.id), params: { league: { fpl_team_name: 'New fpl_team', code: league.code } }

      new_fpl_team = FplTeam.last

      expect(api.data).to match(
        'id' => league.to_param,
        'name' => league.name,
        'status' => league.status,
        'is_owner' => false,
        'owner' => a_hash_including('id' => league.owner.to_param),
        'fpl_teams' => contain_exactly(
          a_hash_including('id' => new_fpl_team.to_param)
        ),
      )
    end

    it 'responds with a 422 message if params invalid' do
      create(:fpl_team, league: league, owner: user)

      api.authenticate(user)

      api.post api_league_join_url(league), params: { league: { fpl_team_name: 'New fpl_team', code: league.code } }

      expect(api.response).to have_http_status(:unprocessable_entity)

      expect(api.errors).to contain_exactly(
        a_hash_including('detail' => 'You have already joined this league', 'source' => 'base'),
      )
    end
  end
end
