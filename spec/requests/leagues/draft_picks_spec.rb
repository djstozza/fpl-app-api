require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe 'api/leagues/league_id/draft_picks', :no_transaction, type: :request do
  let!(:user) { create :user }
  let!(:league) { create :league, status: 'draft' }
  let!(:fpl_team) { create :fpl_team, league: league, owner: user }
  let!(:draft_pick1) { create :draft_pick, league: league, fpl_team: fpl_team }
  let!(:draft_pick2) { create :draft_pick, :mini_draft, league: league, fpl_team: create(:fpl_team, league: league) }
  let!(:draft_pick3) { create :draft_pick, :initialized, league: league, fpl_team: create(:fpl_team, league: league) }
  let(:player) { create :player, :forward }

  describe 'GET /index' do
    it 'renders a list of of draft_picks and whether the user can pick' do
      api.authenticate(user)

      api.get api_league_draft_picks_path(league)

      expect(api.data['draft_finished']).to eq(false)
      expect(api.data['user_can_pick']).to eq(false)
      expect(api.data['next_draft_pick_id']).to eq(draft_pick3.to_param)
      expect(api.data['draft_picks']).to match(
        [
          a_hash_including(
            'id' => draft_pick1.to_param,
            'pick_number' => draft_pick1.pick_number,
            'mini_draft' => false,
            'fpl_team' => a_hash_including(
              'id' => fpl_team.to_param,
              'name' => fpl_team.name,
            ),
            'user' => a_hash_including(
              'id' => user.to_param,
              'username' => user.username,
            ),
            'player' => a_hash_including(
              'id' => draft_pick1.player.to_param,
              'first_name' => draft_pick1.player.first_name,
              'last_name' => draft_pick1.player.last_name,
            ),
            'team' => a_hash_including(
              'id' => draft_pick1.player.team.to_param,
              'short_name' => draft_pick1.player.team.short_name,
            ),
            'position' => draft_pick1.player.position.singular_name_short,
          ),
          a_hash_including(
            'id' => draft_pick2.to_param,
            'pick_number' => draft_pick2.pick_number,
            'fpl_team' => a_hash_including(
              'id' => draft_pick2.fpl_team.to_param,
              'name' => draft_pick2.fpl_team.name,
            ),
            'user' => a_hash_including(
              'id' => draft_pick2.owner.to_param,
              'username' => draft_pick2.owner.username,
            ),
            'mini_draft' => true,
            'player' => nil,
            'team' => nil,
            'position' => nil,
          ),
          a_hash_including(
            'id' => draft_pick3.to_param,
            'pick_number' => draft_pick3.pick_number,
            'fpl_team' => a_hash_including(
              'id' => draft_pick3.fpl_team.to_param,
              'name' => draft_pick3.fpl_team.name,
            ),
            'user' => a_hash_including(
              'id' => draft_pick3.owner.to_param,
              'username' => draft_pick3.owner.username,
            ),
            'mini_draft' => false,
            'player' => nil,
            'team' => nil,
            'position' => nil,
          ),
        ],
      )

      expect(api.meta).to include('total' => 3)
    end

    it 'returns user_can_pick = true if the draft pick owner is next' do
      api.authenticate(draft_pick3.owner)

      api.get api_league_draft_picks_path(league), params: { sort: { pick_number: 'asc' } }

      expect(api.data['user_can_pick']).to eq(true)
    end

    it 'is filterable' do
      api.authenticate(user)

      api.get api_league_draft_picks_path(league), params: {
        filter: {
          fpl_team_id: "#{draft_pick1.fpl_team.to_param},#{draft_pick2.fpl_team.to_param}"
        },
      }

      expect(api.data['draft_picks']).to match(
        [
          a_hash_including(
            'id' => draft_pick1.to_param,
            'pick_number' => draft_pick1.pick_number,
            'mini_draft' => false,
            'fpl_team' => a_hash_including(
              'id' => fpl_team.to_param,
              'name' => fpl_team.name,
            ),
            'user' => a_hash_including(
              'id' => user.to_param,
              'username' => user.username,
            ),
            'player' => a_hash_including(
              'id' => draft_pick1.player.to_param,
              'first_name' => draft_pick1.player.first_name,
              'last_name' => draft_pick1.player.last_name,
            ),
            'team' => a_hash_including(
              'id' => draft_pick1.player.team.to_param,
              'short_name' => draft_pick1.player.team.short_name,
            ),
            'position' => draft_pick1.player.position.singular_name_short,
          ),
          a_hash_including(
            'id' => draft_pick2.to_param,
            'pick_number' => draft_pick2.pick_number,
            'fpl_team' => a_hash_including(
              'id' => draft_pick2.fpl_team.to_param,
              'name' => draft_pick2.fpl_team.name,
            ),
            'user' => a_hash_including(
              'id' => draft_pick2.owner.to_param,
              'username' => draft_pick2.owner.username,
            ),
            'mini_draft' => true,
            'player' => nil,
            'team' => nil,
            'position' => nil,
          ),
        ],
      )

      api.get api_league_draft_picks_path(league), params: { filter: { mini_draft: true } }

      expect(api.data['draft_picks']).to contain_exactly(
        a_hash_including(
          'id' => draft_pick2.to_param,
          'pick_number' => draft_pick2.pick_number,
          'fpl_team' => a_hash_including(
            'id' => draft_pick2.fpl_team.to_param,
            'name' => draft_pick2.fpl_team.name,
          ),
          'user' => a_hash_including(
            'id' => draft_pick2.owner.to_param,
            'username' => draft_pick2.owner.username,
          ),
          'mini_draft' => true,
          'player' => nil,
          'team' => nil,
          'position' => nil,
        ),
      )

      expect(api.meta).to include('total' => 1)
    end
  end

  describe 'PATCH /update' do
    it 'updates the draft current pick', :no_transaction do
      api.authenticate(draft_pick3.owner)

      api.put api_league_draft_pick_path(league.id, draft_pick3.id), params: {
        league: { player_id: player.id },
        sort: { pick_number: 'desc' },
      }

      expect(api.data['draft_finished']).to eq(true)
      expect(api.data['user_can_pick']).to eq(false)
      expect(api.data['draft_picks']).to match(
        [
          a_hash_including(
            'id' => draft_pick3.to_param,
            'pick_number' => draft_pick3.pick_number,
            'fpl_team' => a_hash_including(
              'id' => draft_pick3.fpl_team.to_param,
              'name' => draft_pick3.fpl_team.name,
            ),
            'user' => a_hash_including(
              'id' => draft_pick3.owner.to_param,
              'username' => draft_pick3.owner.username,
            ),
            'mini_draft' => false,
            'player' => a_hash_including(
              'id' => player.to_param,
              'first_name' => player.first_name,
              'last_name' => player.last_name,
            ),
            'team' => a_hash_including(
              'id' => player.team.to_param,
              'short_name' => player.team.short_name,
            ),
            'position' => player.position.singular_name_short,
          ),
          a_hash_including(
            'id' => draft_pick2.to_param,
            'pick_number' => draft_pick2.pick_number,
            'fpl_team' => a_hash_including(
              'id' => draft_pick2.fpl_team.to_param,
              'name' => draft_pick2.fpl_team.name,
            ),
            'user' => a_hash_including(
              'id' => draft_pick2.owner.to_param,
              'username' => draft_pick2.owner.username,
            ),
            'mini_draft' => true,
            'player' => nil,
            'team' => nil,
            'position' => nil,
          ),
          a_hash_including(
            'id' => draft_pick1.to_param,
            'pick_number' => draft_pick1.pick_number,
            'mini_draft' => false,
            'fpl_team' => a_hash_including(
              'id' => fpl_team.to_param,
              'name' => fpl_team.name,
            ),
            'user' => a_hash_including(
              'id' => user.to_param,
              'username' => user.username,
            ),
            'player' => a_hash_including(
              'id' => draft_pick1.player.to_param,
              'first_name' => draft_pick1.player.first_name,
              'last_name' => draft_pick1.player.last_name,
            ),
            'team' => a_hash_including(
              'id' => draft_pick1.player.team.to_param,
              'short_name' => draft_pick1.player.team.short_name,
            ),
            'position' => draft_pick1.player.position.singular_name_short,
          ),
        ],
      )
    end
  end
end
